{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "USCaVARcdugI"
   },
   "source": [
    "# Проект 1 Багаутдинова Екатерина"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {
    "id": "3rxUSUHDqH5Q"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns\n",
    "import plotly.graph_objects as go\n",
    "%matplotlib inline\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: psycopg2-binary in /Users/ekaterinabagautdinova/opt/anaconda3/lib/python3.9/site-packages (2.9.5)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install psycopg2-binary "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {
    "id": "YXhzBaA9tabD"
   },
   "outputs": [],
   "source": [
    "import psycopg2 as ps\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [],
   "source": [
    "conn = ps.connect(host='158.160.52.106', port = 5432, database=\"postgres\", user='student', password='JvLda93aA')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "v9_l-s4BeAyu"
   },
   "source": [
    "Выведем таблицу данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 309
    },
    "id": "W7GMGzdxtl0s",
    "outputId": "1454cc02-1f7b-4fbb-d85e-6cd876a27fa8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      client                      visit  account  application  fininshed\n",
      "0        727 2022-09-12 12:05:05.852857    422.0          NaN        NaN\n",
      "1       1530 2022-11-02 03:58:12.724568     81.0          NaN        NaN\n",
      "2       3554 2022-11-22 14:27:57.308679    892.0          NaN        NaN\n",
      "3          1 2022-09-27 04:47:55.218228      NaN          NaN        NaN\n",
      "4         17 2022-12-03 04:07:29.492097      NaN          NaN        NaN\n",
      "...      ...                        ...      ...          ...        ...\n",
      "4310    4042 2022-12-04 14:53:40.843416      NaN          NaN        NaN\n",
      "4311    4058 2022-11-28 02:08:45.226575      NaN          NaN        NaN\n",
      "4312    4074 2023-01-10 16:39:01.119817      NaN          NaN        NaN\n",
      "4313    4090 2023-01-30 20:50:09.318432      NaN          NaN        NaN\n",
      "4314      95 2022-11-29 10:26:19.973593    502.0          NaN        NaN\n",
      "\n",
      "[4315 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_sql(\"SELECT client.client_rk as client, client.visit_dttm as visit, account.account_rk as account, application.application_rk as application, game.game_flg as fininshed FROM msu_analytics.client left join msu_analytics.account on client.client_rk = account.client_rk left join msu_analytics.application on account.account_rk = application.account_rk left join msu_analytics.game on game.game_rk = application.game_rk \", con=conn)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KfteXOaTeRmd"
   },
   "source": [
    "Заменим пустующие ячейки датафрейма:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "1pcShbfmFHkX",
    "outputId": "2e797bb3-827d-4850-f5c1-6ff8a42330e0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      client                      visit  account  application  fininshed\n",
      "0        727 2022-09-12 12:05:05.852857    422.0          0.0        0.0\n",
      "1       1530 2022-11-02 03:58:12.724568     81.0          0.0        0.0\n",
      "2       3554 2022-11-22 14:27:57.308679    892.0          0.0        0.0\n",
      "3          1 2022-09-27 04:47:55.218228      0.0          0.0        0.0\n",
      "4         17 2022-12-03 04:07:29.492097      0.0          0.0        0.0\n",
      "...      ...                        ...      ...          ...        ...\n",
      "4310    4042 2022-12-04 14:53:40.843416      0.0          0.0        0.0\n",
      "4311    4058 2022-11-28 02:08:45.226575      0.0          0.0        0.0\n",
      "4312    4074 2023-01-10 16:39:01.119817      0.0          0.0        0.0\n",
      "4313    4090 2023-01-30 20:50:09.318432      0.0          0.0        0.0\n",
      "4314      95 2022-11-29 10:26:19.973593    502.0          0.0        0.0\n",
      "\n",
      "[4315 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "df = df.fillna(0)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gDPYPxMseinH"
   },
   "source": [
    "Изменим формат даты в столбцах:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qi9ehHLnFP7v",
    "outputId": "2438b8aa-a3ac-4051-c9c6-894138ea8d56"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      client  account  application  fininshed  year  month  week\n",
      "0        727    422.0          0.0        0.0  2022      9    37\n",
      "1       1530     81.0          0.0        0.0  2022     11    44\n",
      "2       3554    892.0          0.0        0.0  2022     11    47\n",
      "3          1      0.0          0.0        0.0  2022      9    39\n",
      "4         17      0.0          0.0        0.0  2022     12    48\n",
      "...      ...      ...          ...        ...   ...    ...   ...\n",
      "4310    4042      0.0          0.0        0.0  2022     12    48\n",
      "4311    4058      0.0          0.0        0.0  2022     11    48\n",
      "4312    4074      0.0          0.0        0.0  2023      1     2\n",
      "4313    4090      0.0          0.0        0.0  2023      1     5\n",
      "4314      95    502.0          0.0        0.0  2022     11    48\n",
      "\n",
      "[4315 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "df['year'] = pd.DatetimeIndex(df['visit']).year\n",
    "df['month'] = pd.DatetimeIndex(df['visit']).month\n",
    "df['week'] = df['visit'].dt.week\n",
    "df = df.drop('visit', axis=1)\n",
    "print(df) #так как посещение сайта - регисрация- подача заявки - прохождение квеста проходят в разные дни, то для точки начала будем считать дату посещения. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Нам инересна конверсия и воронка, а не конкретные клиенты и аккаунты, так что заменим все ненулевые значения в соответствующих столбцах на 1, для удобного подсчета суммы."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      client  account  application  fininshed  year  month  week\n",
      "0          1      1.0          0.0        0.0  2022      9    37\n",
      "1          1      1.0          0.0        0.0  2022     11    44\n",
      "2          1      1.0          0.0        0.0  2022     11    47\n",
      "3          1      0.0          0.0        0.0  2022      9    39\n",
      "4          1      0.0          0.0        0.0  2022     12    48\n",
      "...      ...      ...          ...        ...   ...    ...   ...\n",
      "4310       1      0.0          0.0        0.0  2022     12    48\n",
      "4311       1      0.0          0.0        0.0  2022     11    48\n",
      "4312       1      0.0          0.0        0.0  2023      1     2\n",
      "4313       1      0.0          0.0        0.0  2023      1     5\n",
      "4314       1      1.0          0.0        0.0  2022     11    48\n",
      "\n",
      "[4315 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "for i in range(len(df)):\n",
    "    if df.loc[i, 'client'] != 0:\n",
    "        df.loc[i, 'client'] = 1\n",
    "for i in range(len(df)):\n",
    "    if df.loc[i, 'account'] != 0:\n",
    "        df.loc[i, 'account'] = 1\n",
    "for i in range(len(df)):\n",
    "    if df.loc[i, 'application'] != 0:\n",
    "        df.loc[i, 'application'] = 1        \n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сделаем группировку по годам и месяцам dfmonth и группировку с неделями в dfweek"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            client  account  application  fininshed\n",
      "year month                                         \n",
      "2022 9         818    230.0         91.0       59.0\n",
      "     10        887    261.0        109.0       74.0\n",
      "     11        831    245.0        101.0       71.0\n",
      "     12        848    239.0        100.0       39.0\n",
      "2023 1         899    260.0        111.0       21.0\n",
      "     2          32      8.0          0.0        0.0\n"
     ]
    }
   ],
   "source": [
    "dfmonth = df.groupby(['year', 'month']).sum()\n",
    "dfmonth = dfmonth.drop('week', axis = 1)\n",
    "print(dfmonth)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 client  account  application  fininshed\n",
      "year month week                                         \n",
      "2022 9     35       119     40.0         15.0        8.0\n",
      "           36       187     34.0          9.0        6.0\n",
      "           37       178     54.0         27.0       11.0\n",
      "           38       190     54.0         21.0       18.0\n",
      "           39       144     48.0         19.0       16.0\n",
      "     10    39        68     28.0         15.0       10.0\n",
      "           40       213     67.0         27.0       22.0\n",
      "           41       197     51.0         20.0       17.0\n",
      "           42       179     49.0         20.0       14.0\n",
      "           43       201     60.0         27.0       11.0\n",
      "           44        29      6.0          0.0        0.0\n",
      "     11    44       183     56.0         31.0       23.0\n",
      "           45       186     54.0         25.0       16.0\n",
      "           46       182     42.0         10.0        7.0\n",
      "           47       192     61.0         26.0       18.0\n",
      "           48        88     32.0          9.0        7.0\n",
      "     12    48        95     19.0          9.0        4.0\n",
      "           49       178     57.0         25.0       14.0\n",
      "           50       204     60.0         22.0        8.0\n",
      "           51       205     59.0         29.0       10.0\n",
      "           52       166     44.0         15.0        3.0\n",
      "2023 1     1        212     69.0         27.0        4.0\n",
      "           2        214     56.0         23.0        6.0\n",
      "           3        189     51.0         21.0        5.0\n",
      "           4        198     57.0         29.0        5.0\n",
      "           5         50     15.0          6.0        0.0\n",
      "           52        36     12.0          5.0        1.0\n",
      "     2     5         32      8.0          0.0        0.0\n"
     ]
    }
   ],
   "source": [
    "dfweek = df.groupby(['year', 'month', 'week']).sum()\n",
    "print(dfweek) #проверила несколько способов получения номера недели и каждый раз получала 52 в январе 2023. Видимо в данных есть какая-то ошибка, так что придется просуммировать данные 5 недели и 52 недели 2023 года вручную."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посчитаем конверсию для разбиения по месяцам года."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            client  account  application  fininshed  конверсия_рег  \\\n",
      "year month                                                           \n",
      "2022 9         818    230.0         91.0       59.0       0.281174   \n",
      "     10        887    261.0        109.0       74.0       0.294250   \n",
      "     11        831    245.0        101.0       71.0       0.294826   \n",
      "     12        848    239.0        100.0       39.0       0.281840   \n",
      "2023 1         899    260.0        111.0       21.0       0.289210   \n",
      "     2          32      8.0          0.0        0.0       0.250000   \n",
      "\n",
      "            конверсия_заявка  конверсия_пройдено  \n",
      "year month                                        \n",
      "2022 9              0.111247            0.072127  \n",
      "     10             0.122886            0.083427  \n",
      "     11             0.121540            0.085439  \n",
      "     12             0.117925            0.045991  \n",
      "2023 1              0.123471            0.023359  \n",
      "     2              0.000000            0.000000  \n"
     ]
    }
   ],
   "source": [
    "dfmonth[\"конверсия_рег\"] = dfmonth.account / dfmonth.client\n",
    "dfmonth[\"конверсия_заявка\"] = dfmonth.application / dfmonth.client\n",
    "dfmonth[\"конверсия_пройдено\"] = dfmonth.fininshed / dfmonth.client\n",
    "print(dfmonth)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Наблюдаем повышенную конверсию на 2% примерно в октябре-ноябре 2022, пониженную в январе 2023. Возможно, это влияние новогодних праздников и раннего бронирования игр к ним."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посчитаем конверсию для разбиения по неделям года."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 client  account  application  fininshed  конверсия_рег  \\\n",
      "year month week                                                           \n",
      "2022 9     35       119     40.0         15.0        8.0       0.048900   \n",
      "           36       187     34.0          9.0        6.0       0.041565   \n",
      "           37       178     54.0         27.0       11.0       0.066015   \n",
      "           38       190     54.0         21.0       18.0       0.066015   \n",
      "           39       144     48.0         19.0       16.0       0.058680   \n",
      "     10    39        68     28.0         15.0       10.0       0.031567   \n",
      "           40       213     67.0         27.0       22.0       0.075536   \n",
      "           41       197     51.0         20.0       17.0       0.057497   \n",
      "           42       179     49.0         20.0       14.0       0.055242   \n",
      "           43       201     60.0         27.0       11.0       0.067644   \n",
      "           44        29      6.0          0.0        0.0       0.006764   \n",
      "     11    44       183     56.0         31.0       23.0       0.067389   \n",
      "           45       186     54.0         25.0       16.0       0.064982   \n",
      "           46       182     42.0         10.0        7.0       0.050542   \n",
      "           47       192     61.0         26.0       18.0       0.073406   \n",
      "           48        88     32.0          9.0        7.0       0.038508   \n",
      "     12    48        95     19.0          9.0        4.0       0.022406   \n",
      "           49       178     57.0         25.0       14.0       0.067217   \n",
      "           50       204     60.0         22.0        8.0       0.070755   \n",
      "           51       205     59.0         29.0       10.0       0.069575   \n",
      "           52       166     44.0         15.0        3.0       0.051887   \n",
      "2023 1     1        212     69.0         27.0        4.0       0.076752   \n",
      "           2        214     56.0         23.0        6.0       0.062291   \n",
      "           3        189     51.0         21.0        5.0       0.056730   \n",
      "           4        198     57.0         29.0        5.0       0.063404   \n",
      "           5         50     15.0          6.0        0.0       0.016685   \n",
      "           52        36     12.0          5.0        1.0       0.013348   \n",
      "     2     5         32      8.0          0.0        0.0       0.250000   \n",
      "\n",
      "                 конверсия_заявка  конверсия_пройдено  \n",
      "year month week                                        \n",
      "2022 9     35            0.018337            0.009780  \n",
      "           36            0.011002            0.007335  \n",
      "           37            0.033007            0.013447  \n",
      "           38            0.025672            0.022005  \n",
      "           39            0.023227            0.019560  \n",
      "     10    39            0.016911            0.011274  \n",
      "           40            0.030440            0.024803  \n",
      "           41            0.022548            0.019166  \n",
      "           42            0.022548            0.015784  \n",
      "           43            0.030440            0.012401  \n",
      "           44            0.000000            0.000000  \n",
      "     11    44            0.037304            0.027677  \n",
      "           45            0.030084            0.019254  \n",
      "           46            0.012034            0.008424  \n",
      "           47            0.031288            0.021661  \n",
      "           48            0.010830            0.008424  \n",
      "     12    48            0.010613            0.004717  \n",
      "           49            0.029481            0.016509  \n",
      "           50            0.025943            0.009434  \n",
      "           51            0.034198            0.011792  \n",
      "           52            0.017689            0.003538  \n",
      "2023 1     1             0.030033            0.004449  \n",
      "           2             0.025584            0.006674  \n",
      "           3             0.023359            0.005562  \n",
      "           4             0.032258            0.005562  \n",
      "           5             0.006674            0.000000  \n",
      "           52            0.005562            0.001112  \n",
      "     2     5             0.000000            0.000000  \n"
     ]
    }
   ],
   "source": [
    "dfweek[\"конверсия_рег\"] = dfweek.account / dfmonth.client\n",
    "dfweek[\"конверсия_заявка\"] = dfweek.application / dfmonth.client\n",
    "dfweek[\"конверсия_пройдено\"] = dfweek.fininshed / dfmonth.client\n",
    "print(dfweek)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "для 5 и 52 недели\n",
    "конверсия_рег = 27/86 = 0.313953\n",
    "конверсия_заявка = 11/86 = 0.127906\n",
    "конверсия_пройдено = 1/86 = 0.011627"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Конверсия немного растет к середине месяца, потом образно немного спадает. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tw2eCWNit1ft"
   },
   "source": [
    "# Построим воронку\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 265
    },
    "id": "WvDZhE9YuFVV",
    "outputId": "17660318-0b16-4f23-fc2a-266203f9c098"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "client = dfmonth['client'].values.tolist()\n",
    "account = dfmonth['конверсия_рег'].values.tolist()\n",
    "application = dfmonth['конверсия_заявка'].values.tolist()\n",
    "finished = dfmonth['конверсия_пройдено'].values.tolist()\n",
    "month = [9,10,11,12,1,2]\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.bar(month, client, color='#8D6E63', alpha=0.7, label='clients')\n",
    "ax.bar(month, [r * v for r, v in zip(account, client)], color='#5D4037', alpha=0.7, label='account')\n",
    "ax.bar(month, [a * r * v for a, r, v in zip(application, account, client)], color='#2E342E', alpha=0.7, label='application')\n",
    "ax.bar(month, [c * a * r * v for c, a, r, v in zip(finished, application, account, client)], color='#8E0000', alpha=0.7, label='finished')\n",
    "\n",
    "ax.legend()\n",
    "ax.set_xlabel('Period')\n",
    "ax.set_ylabel('Count of users')\n",
    "ax.set_title('Conversion Funnel')\n",
    "ax.spines['top'].set_visible(False)\n",
    "ax.spines['right'].set_visible(False)\n",
    "\n",
    "plt.show() #воронка для разбиения по месяцам"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "client = dfweek['client'].values.tolist()\n",
    "account = dfweek['конверсия_рег'].values.tolist()\n",
    "application = dfweek['конверсия_заявка'].values.tolist()\n",
    "finished = dfweek['конверсия_пройдено'].values.tolist()\n",
    "week = [35, 36, 37, 38, 39, 39, 40, 41, 42, 43, 44, 44, 45, 46, 47, 48, 48, 49, 50, 51, 52, 1, 2, 3, 4, 5, 52, 5]\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.bar(week, client, color='#8D6E63', alpha=0.7, label='clients')\n",
    "ax.bar(week, [r * v for r, v in zip(account, client)], color='#5D4037', alpha=0.7, label='account')\n",
    "ax.bar(week, [a * r * v for a, r, v in zip(application, account, client)], color='#4E342E', alpha=0.7, label='application')\n",
    "ax.bar(week, [c * a * r * v for c, a, r, v in zip(finished, application, account, client)], color='#8E0000', alpha=0.7, label='finished')\n",
    "\n",
    "ax.legend()\n",
    "ax.set_xlabel('Period')\n",
    "ax.set_ylabel('Count of users')\n",
    "ax.set_title('Conversion Funnel')\n",
    "ax.spines['top'].set_visible(False)\n",
    "ax.spines['right'].set_visible(False)\n",
    "\n",
    "plt.show() #воронка для разбиения по месяцам"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Понимаю, что недели разбиты некорректтно, так как в группировании по месяцам некоторые недели учитывались дважды (если конец месяца был в середине недели), но я не смогла найти способа устранить это. Ну и ошибка с 5 и 52 неделей тут тоже не учтена, тк я не нашла решения. "
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Лекция 3 - Визуализация и метрики.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
